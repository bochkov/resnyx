plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.52.0'
}

group = 'resnyx'
version = '9.2'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven {
        name = "reposiliteRepositoryReleases"
        url = "https://maven.sergeybochkov.com/releases"
    }
}

dependencies {
    implementation 'org.slf4j:slf4j-api:2.0.17'
    implementation platform('com.fasterxml.jackson:jackson-bom:2.20.0')
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.13.4'
    testImplementation 'org.assertj:assertj-core:3.27.4'
    testImplementation 'org.mockito:mockito-core:5.17.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.19.0'
    testImplementation 'ch.qos.logback:logback-classic:1.5.18'
    testImplementation platform('com.konghq:unirest-java-bom:4.5.0')
    testImplementation 'com.konghq:unirest-java-core'
    testImplementation 'com.konghq:unirest-modules-jackson'
}

tasks.named('test') {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            url = "https://maven.sergeybochkov.com/releases"
            credentials {
                username = "$reposilite_user"
                password = "$reposilite_password"
            }
        }
    }
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

def isNonStable = { String version ->
    return ['.*-alpha\\d+', '.*-M\\d+', '.*-rc\\d+', '.*-RC\\d+'].any { it -> version.matches(it) }
}

tasks.named("dependencyUpdates").configure {
    checkForGradleUpdate = false
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}